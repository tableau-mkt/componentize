<?php
/**
 * @file Render field content through a component.
 */

use Componentize\ComponentFactory;
use Componentize\ComponentField;

require_once __DIR__ . '/componentize_entity.helpers.inc';


/**
 * Implementation of hook_ctools_plugin_api().
 */
function componentize_entity_ctools_plugin_api($owner, $api) {
  // Tell CTools that we support the entity_view_mode_component API.
  if ($owner == 'componentize_entity' && $api == 'entity_view_mode_component') {
    return array('version' => 1);
  }
}


/**
 * Export callback for exportable settings schema via ctools.
 */
function componentize_entity_export_evm_component($context) {
  return ctools_export_object('componentize_entity_entity_view_mode', $context);
}


/**
 * Save callback for componentized entity exportables.
 */
function componentize_entity_save_evm_component($object) {
  if ($object->export_type & EXPORT_IN_DATABASE) {
    // Existing record.
    $update = array('id');
  }
  else {
    // New record.
    $update = array();
    $object->export_type = EXPORT_IN_DATABASE;
  }
  $return = drupal_write_record('componentize_entity_entity_view_mode', $object, $update);

  return $return;
}


/**
 * Implements hook_componentize_field_types_info().
 *
 * Register available field types.
 */
function componentize_entity_componentize_field_types_info() {
  return array(
    'default' =>            'Componentize\\ComponentField',
    'text' =>               'Componentize\\ComponentFieldText',
    'text_long' =>          'Componentize\\ComponentFieldText',
    'text_with_summary' =>  'Componentize\\ComponentFieldText',
    'number_integer' =>     'Componentize\\ComponentFieldNumber',
    'number_decimal' =>     'Componentize\\ComponentFieldNumber',
    'number_unformatted' => 'Componentize\\ComponentFieldNumber',
    'file' =>               'Componentize\\ComponentFieldFile',
    'image' =>              'Componentize\\ComponentFieldFile',
    'link_field' =>         'Componentize\\ComponentFieldLink',
  );
}


/**
 * Implements hook_theme().
 */
function componentize_entity_theme() {
  return array(
    'entity_view_mode_component' => array(
      'render element' => 'element',
    ),
  );
}


/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add component fields to the entity view modes display form.
 */
function componentize_entity_form_field_ui_display_overview_form_alter(&$form, &$form_state) {
  // Current value via ctools exportable schema.
  $settings = _componentize_entity_get_view_mode_display_settings(
    $form['#entity_type'], $form['#bundle'], $form['#view_mode']
  );
  $component = ($settings) ? $settings->component : '';
  $modifier = ($settings) ? $settings->settings['modifier'] : '';

  // Create vertical tabs.
  _componentize_entity_ui_create_vertical_tabs($form);

  // Add modifier selector.
  _componentize_build_modifier_list_form(
    $form, array('additional_settings', 'componentize'), $component, $modifier
  );

  // Save settings on submit.
  $form['additional_settings']['componentize']['#new'] = ($settings) ? FALSE : TRUE;
  $form['#submit'][] = 'componentize_entity_entity_view_mode_save';
}


/**
 * Save the layout settings from the 'Manage display' screen.
 *
 * @todo Would be nice to maintain structure but #tree isn't working.
 */
function componentize_entity_entity_view_mode_save($form, &$form_state) {
  $settings = $form_state['values']['additional_settings'];
  $id = $form['#entity_type'] . '|' . $form['#bundle'] . '|' . $form['#view_mode'];

  // Remove empty settings.
  if (!$settings['component']) {
    db_delete('componentize_entity_entity_view_mode')
      ->condition('id', $id)
      ->execute();
    return;
  }

  // Remove existing settings for disabled view modes.
  _componentize_entity_remove_disabled_evm($form, $settings['modes']['view_modes_custom']);

  // Build record to save from meta data and settings.
  $record = (object) array(
    'id' => $id,
    'entity_type' => $form['#entity_type'],
    'bundle' => $form['#bundle'],
    'view_mode' => $form['#view_mode'],
    'component' => $settings['component'],
    'settings' => array(
      'modifier' => $settings['component_modifier'],
    ),
  );

  // Let other modules alter the settings.
  drupal_alter('entity_view_mode_component_save', $record, $form_state);

  // Store the record.
  // Include primary for new records.
  $update = !$form['additional_settings']['componentize']['#new'] ? 'id' : array();

  // NOTE: Return value is mostly useless, fails silently.
  drupal_write_record('componentize_entity_entity_view_mode', $record, $update);

  // Clear entity info cache.
  cache_clear_all('entity_info', 'cache', TRUE);
}


/**
 * Implements hook_field_formatter_info_alter().
 *
 * @todo Limit declarations to those within components.
 *
 * Add custom settings for field types within view modes.
 */
function componentize_entity_field_formatter_info_alter(&$info) {
  $types = array_keys(componentize_entity_field_types());
  foreach ($info as $format => $formatter) {
    // Field type is registered.
    if (array_intersect($formatter['field types'], $types) && gettype($info[$format]['settings']) === 'array') {
      $info[$format]['settings'] += array(
        COMPONENTIZE_TEMPLATE_VAR => '',
        COMPONENTIZE_TEMPLATE_HANDLER => '',
      );
    }
  }
}


/**
 * Implements hook_field_formatter_settings_form_alter().
 *
 * Add settings to fields within component view modes.
 *
 * @param array &$settings_form
 * @param array $context
 */
function componentize_entity_field_formatter_settings_form_alter(&$settings_form, $context) {
  $field_display_mode = $context['instance']['display'][$context['view_mode']];

  if ($field_display_mode['type'] !== 'hidden') {
    // Get settings.
    $view_mode_settings = _componentize_entity_get_view_mode_display_settings(
      $context['instance']['entity_type'], $context['instance']['bundle'], $context['view_mode']
    );

    // Use configured component.
    if (isset($view_mode_settings->component) && !empty($view_mode_settings->component)) {
      $component = ComponentFactory::create($view_mode_settings->component);
      // Choose variables.
      _componentize_entity_generate_variable_form(
        $settings_form, $component, $field_display_mode['settings']
      );
    }
  }
}


/**
 * Implements hook_field_formatter_settings_summary_alter().
 *
 * Display field mapping settings to admins.
 */
function componentize_entity_field_formatter_settings_summary_alter(&$summary, $context) {
  $field_display_mode = $context['instance']['display'][$context['view_mode']];
  $hidden = ($field_display_mode['type'] === 'hidden');
  $within_types = (isset($context['field']['type']) &&
      in_array($context['field']['type'], array_keys(componentize_entity_field_types())));

  // We know about this type of field.
  if (!$hidden && $within_types) {
    $view_mode_settings = _componentize_entity_get_view_mode_display_settings(
      $context['instance']['entity_type'], $context['instance']['bundle'], $context['view_mode']
    );

    // A component has been set for the view mode.
    if ($view_mode_settings && isset($view_mode_settings->component) && !empty($view_mode_settings->component)) {
      _componentize_entity_generate_summary($summary, $field_display_mode['settings']);
    }
  }
}


/**
 * Implements hook_entity_view_alter().
 *
 * Prepare entity for theming via Component.
 *
 * @param array &$build
 * @param string $type
 */
function componentize_entity_entity_view_alter(&$build, $type) {
  // View mode settings for the component.
  $view_mode = $build['#view_mode'];
  $settings = _componentize_entity_get_view_mode_display_settings(
    $build['#entity_type'], $build['#bundle'], $view_mode
  );

  // No "full content" specific settings were found, try "default" instead.
  if (!$settings && $view_mode === 'full') {
    $settings = _componentize_entity_get_view_mode_display_settings(
      $build['#entity_type'], $build['#bundle'], 'default'
    );
  }

  // Check for a configured component.
  if (isset($settings->component) && !empty($settings->component)) {
    // Currently unecessary.
    //$build['#pre_render'][] = 'componentize_entity_entity_view_pre_render';

    $build['#theme'] = 'entity_view_mode_component';
    // Pass along relevant data for theme layer.
    $build['#componentize_component'] = $settings->component;
    $build['#componentize_settings'] = $settings->settings;
    $build['#componentize_entity'] = _componentize_entity_get_fields($build);
  }
}


/**
 * Returns HTML for a component fieldgroups.
 *
 * @param array $variables
 *
 * @return string
 */
function theme_entity_view_mode_component($variables) {
  $element = $variables['element'];
  $modifier = $element['#componentize_settings']['modifier'];

  // Pass data through component.
  $component = ComponentFactory::create($element['#componentize_component']);

  // Make modifier available in the template.
  if ($modifier) {
    $component->setModifier($modifier);
  }

  // Warn about parsing failures.
  $template = $component->getTemplate();
  return !empty($template) ? $component->render($element['#componentize_entity']) :
      t('Component template empty or parse error. Component: @component', array(
        '@component' => $element['#componentize_component']
      ));
}


/**
 * Rendering field via Drupal or component handler, handle multiple.
 *
 * @todo Nested components?
 * @todo Allowing picking a formatter beyond just type handler.
 *
 * @param string $field_name
 * @param array $build
 *   Entity build render array.
 * @param array $settings
 *   Component specific settings.
 *
 * @return string|array
 */
function componentize_entity_render_field($field_name, $entity_type, $entity, $view_mode, $items, $settings = NULL) {
  $field_info     = field_info_field($field_name);
  //$entity_info    = entity_get_info($entity_type);
  //$bundle         = $entity->{$entity_info['entity keys']['bundle']};
  //$field_settings = field_info_instance($entity_type, $field_name, $bundle);
  $type           = $field_info['type'];
  $handler        = FALSE;

  // Use component field handler. See: componentize_entity.api.php
  if ($settings && isset($settings[COMPONENTIZE_TEMPLATE_HANDLER]) && $settings[COMPONENTIZE_TEMPLATE_HANDLER] !== 0) {
    $fields_types = componentize_entity_field_types();
    $class_name = isset($fields_types[$type]) ? $fields_types[$type] : $fields_types['default'];

    // Load class.
    if (class_exists($class_name)) {
      $handler = new $class_name($field_info);
    }
    else {
      watchdog('componentize', 'Missing class: !class', array('!class' => $class_name), WATCHDOG_ERROR);
      drupal_set_message(t('Missing class: !class', array('!class' => $class_name)), 'error');
    }
  }

  // Allow multi-field.
  if (($field_info['cardinality'] > 1) || ($field_info['cardinality'] < 0)) {
    $output = array();
    foreach ($items as $item) {
      // Via field handler class or Drupal render.
      if ($handler) {
        $output[] = $handler->getValues($item);
      }
      else {
        $renderer = field_view_value($entity_type, $entity, $field_name, $item, $view_mode);
        $output[] = render($renderer);
      }
    }
  }
  else {
    // Single value field, same way.
    if ($handler) {
      $output = $handler->getValues($items[0]);
    }
    else {
      $renderer = field_view_value($entity_type, $entity, $field_name, $items[0], $view_mode);
      $output = render($renderer);
    }
  }

  return $output;
}
