<?php
/**
 * @file Use components with fieldgroups.
 */

use Component\ComponentFactory;

/**
 * Implements hook_ctools_plugin_api().
 */
function components_fieldgroup_ctools_plugin_api($module, $api) {
  if ($module == 'field_group' && $api == 'field_group') {
    return array('version' => 1);
  }
}


/**
 * Implements hook_theme().
 */
function components_fieldgroup_theme() {
  return array(
    'components_fieldgroup' => array(
      'render element' => 'element',
    ),
  );
}


/**
 * List available field types for variables.
 *
 * @return array
 */
function components_field_types() {
  return array(
    'text_default',
    'text_plain',
    'number_integer',
  );
}


/**
 * Obtain variables from field value(s).  Allows more complex fields.
 *
 * @param string $type
 *   Format type of the field.
 * @param array $value
 *   Field value array.
 *
 * @return string|array
 *   Variable data to send to template.
 */
function components_get_vars($type, $value) {
  switch ($type) {
    case 'text_default':
    case 'text_plain':
    case 'number_integer':
    case 'text_trimmed':
      return $value['safe_value'];
      break;
  }
}


/**
 * Implements hook_field_formatter_info_alter().
 */
function components_fieldgroup_field_formatter_info_alter(&$info) {
  // Add custom setting for fields within fieldgroups.
  foreach (components_field_types() as $type) {
    $info[$type]['settings'] += array(
      'components_fieldgroup_variable_name' => '',
    );
  }
}


/**
 * Implements hook_field_formatter_settings_form_alter().
 *
 * Add settings to fields within component fieldgroups.
 */
function components_fieldgroup_field_formatter_settings_form_alter(&$settings_form, $context) {
  $display = $context['instance']['display'][$context['view_mode']];
  $settings = $display['settings'];
  $field_name = $context['instance']['field_name'];
  // @todo Carefully confirm there is a fieldgroup set.
  $parent_group = $context['form_state']['input']['fields'][$field_name]['parent'];
  $group_settings = $context['form_state']['field_group'][$parent_group]->format_settings['instance_settings'];

  if (in_array($display['type'], components_field_types())) {
    // Use configured compontent.
    if (isset($group_settings['component'])) {
      $factory = new ComponentFactory;
      $component = $factory->create($group_settings['component']);
      // Choose from registered variables.
      $settings_form['components_fieldgroup_variable_name'] = array(
        '#title' => t('Variable'),
        '#type' => 'select',
        '#options' => drupal_map_assoc($component->getVariables()),
        '#default_value' => $settings['components_fieldgroup_variable_name'],
        //'#element_validate' => array('components_fieldgroup_validate_variable'),
        '#required' => TRUE,
      );
    }
  }
}


/**
 * Validation for text-input variable settings.
 */
// function components_fieldgroup_validate_variable($element, &$form_state, $form) {
//   if (!ctype_alnum($element['#value'])) {
//     form_error($element, t('This field must be alphanumeric.'));
//   }
// }


/**
 * Reduce modifier choice to single string for multiple select lists in the fieldgroup.
 */
function components_fieldgroup_single_modifier_validate($element, &$form_state, $form) {
  // Due to using states for easy admin UI, an array is returned.
  $group_name = $form_state['triggering_element']['#field_name'];
  $group_values = &$form_state['values']['fields'][$group_name]['format_settings']['settings']['instance_settings'];

  // Update value.
  $group_values['modifier'] = $group_values['modifier'][$group_values['component']];
}


/**
 * Implements hook_field_formatter_settings_summary().
 *
 * Display field mapping settings to admins.
 */
function components_fieldgroup_field_formatter_settings_summary_alter(&$summary, $context) {
  $display = $context['instance']['display'][$context['view_mode']];
  $settings = $display['settings'];

  // @todo Only for fields within fieldgroups format_type 'components_fieldgroup'.

  if (in_array($display['type'], components_field_types())) {
    if (isset($settings['components_fieldgroup_variable_name'])) {
      if (!empty($summary)) {
        $summary .= '<br />';
      }

      if ($settings['components_fieldgroup_variable_name']) {
        $summary .= t('Map to "@variable" template variable', array(
          '@variable' => $settings['components_fieldgroup_variable_name'],
        ));
      }
      else {
        $summary .= t('No template variable mapped yet!');
      }
    }
  }
}


/**
 * Returns HTML for a component fieldgroups.
 *
 * @param array $variables
 *
 * @return string
 */
function theme_components_fieldgroup($variables) {
  // Find variables for templates in fields.
  $template_vars = array();
  $element = $variables['element'];
  foreach ($element['#children'] as $field_name) {
    // Get mapping from field settings within group.
    $instance = field_info_instance(
      $element[$field_name]['#entity_type'], $field_name, $element[$field_name]['#bundle']
    );
    $variable_map = $instance['display'][$element['#view_mode']]['settings']['components_fieldgroup_variable_name'];

    // Add field label to variables.
    $template_vars[$variable_map . '_label'] = $instance['label'];

    // Multi-value, and allow extensible formats.
    $field_info = field_info_field($field_name);
    $format = $element[$field_name]['#formatter'];
    if (($field_info['cardinality'] > 1 || $field_info['cardinality'] < 0)) {
      $template_vars[$variable_map] = array();
      foreach ($element[$field_name]['#items'] as $value) {
        $template_vars[$variable_map][] = components_get_vars($format, $value);
      }
    }
    else {
      $template_vars[$variable_map] = components_get_vars($format, $element[$field_name]['#items'][0]);
    }
  }

  // Pass data through template.
  $factory = new ComponentFactory;
  $component = $factory->create($element['#settings']['component']);

  // Make modifier available in the template.
  if (isset($element['#settings']['modifier'])) {
    $component->setModifier($element['#settings']['modifier']);
  }

  return $component->render($template_vars);
}
