<?php
/**
 * @file Style-guide component integration.
 */

use Componentize\ComponentFactory;
use Componentize\ParserKSSnode;

define('COMPONENTIZE_DIRECTORY', 'sites/all/components');
define('COMPONENTIZE_COMPILED_ASSETS', 'sites/all/components/dist');
define('COMPONENTIZE_COMPILED_TEMPLATES', 'sites/default/files/components');
define('COMPONENTIZE_COMPILED_CSS', 'style.css');
define('COMPONENTIZE_COMPILED_JS', 'script.js');

/**
 * Implements hook_menu().
 */
function componentize_menu() {
  $path = 'admin/structure/componentize';
  $items[$path] = array(
    'title' => 'Components',
    'description' => 'Browse available component structure.',
    'access arguments' => array('access components library'),
    'page callback' => 'componentize_library_output',
    'file' => 'componentize.library.inc'
  );
  $items[$path . '/library'] = array(
    'title' => 'Library',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items[$path . '/settings'] = array(
    'title' => 'Settings',
    'description' => 'Configure component structure.',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('componentize_settings'),
    'file' => 'componentize.admin.inc'
  );

  return $items;
}


/**
 * Implements hook_perm().
 */
function componentize_permission() {
  return array(
    'access components library' => array(
      'title' => t('Visit Components Library'),
      'description' => t('Browse available component structure.')
    ),
  );
}


/**
 * Implments hook_preprocess_page().
 */
function componentize_preprocess_page(&$variables) {
  $assets_dir = variable_get('componentize_assets', COMPONENTIZE_COMPILED_ASSETS);

  // Javascript.
  if (file_exists($assets_dir . '/' . COMPONENTIZE_COMPILED_JS)) {
    drupal_add_js($assets_dir . '/' . COMPONENTIZE_COMPILED_JS);
  }
  else {
    drupal_set_message(t('Unable to find and include compiled Components javascript.'), 'warning');
  }

  // CSS.
  if (file_exists($assets_dir . '/' . COMPONENTIZE_COMPILED_CSS)) {
    drupal_add_css($assets_dir . '/' . COMPONENTIZE_COMPILED_CSS);
  }
  else {
    drupal_set_message(t('Unable to find and include compiled Components styles.'), 'warning');
  }
}


/**
 * Provide list of components, via parsing directory or stashed variable.
 *
 * @todo Nested components (accordian + accordian item).
 *
 * @param boolean $shallow
 *   Just return a list without full objects (optional).
 *
 * @return array
 */
function componentize_list($shallow = FALSE, $reset = FALSE) {
  $list = &drupal_static(__FUNCTION__ . (($shallow) ? 'SHALLOW' : 'FULL'));
  $styleguide = &drupal_static(__FUNCTION__);
  $dir = variable_get('componentize_directory', COMPONENTIZE_DIRECTORY);

  // Use the stored variable.
  if (isset($list) && !$reset) return $list;

  // Get the list, try via variable.
  $list = variable_get('componentize_list', array());
  if (empty($list) || $reset) {
    // Parse all styles.
    $styleguide = new ParserKSSnode($dir);
    $components = $styleguide->getSections();
    // $components = $styleguide->getSectionChildren($section->getReference());
    $list = array_merge($list, array_keys($components));

    // Store results or complain.
    if (!empty($list)) {
      variable_set('componentize_list', $list);
    }
    else {
      drupal_set_message('No web components found.', 'warning');
    }
  }

  // Keep simple when possible.
  if (!$shallow) {
    // Build component objects.
    $list_full = array();
    foreach ($list as $key => $component) {
      $list_full[$component] = ComponentFactory::create($component, array(), TRUE);
      // Clear storage and compiled templates.
      if ($reset) {
        $list_full[$component]->remove();
      }
    }
    // Allows static.
    $list = $list_full;
  }

  // Allow adding custom components.
  drupal_alter('componentize_list', $list, $shallow);

  return $list;
}
