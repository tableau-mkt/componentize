<?php
/**
 * @file Render content fieldgroups through a component.
 */

use Componentize\ComponentFactory;
use Componentize\ComponentsField;

define('COMPONENTIZE_NAMESPACE', 'Componentize');
define('COMPONENTIZE_FIELD_HANDLER_DEFAULT', 'ComponentField');

/**
 * Implements hook_ctools_plugin_api().
 */
function componentize_fieldgroup_ctools_plugin_api($module, $api) {
  if ($module == 'field_group' && $api == 'field_group') {
    return array('version' => 1);
  }
}


/**
 * Implements hook_theme().
 */
function componentize_fieldgroup_theme() {
  return array(
    'component_fieldgroup' => array(
      'render element' => 'element',
    ),
  );
}


/**
 * List available field types for variables.
 *
 * @return array
 */
function componentize_fieldgroup_field_types() {
  $handlers = &drupal_static(__FUNCTION__);
  if (!$handlers) {
    $handlers = module_invoke_all('component_fieldgroup_field_types_info');
    drupal_alter('component_fieldgroup_field_types_info', $handlers);
  }
  return $handlers;
}


/**
 * Implements hook_component_fieldgroup_field_types_info().
 *
 * Register available field types.
 */
function componentize_fieldgroup_component_fieldgroup_field_types_info() {
  return array(
    'text' =>               COMPONENTIZE_NAMESPACE . '\\' . COMPONENTIZE_FIELD_HANDLER_DEFAULT,
    'text_long' =>          COMPONENTIZE_NAMESPACE . '\\' . COMPONENTIZE_FIELD_HANDLER_DEFAULT,
    'text_with_summary' =>  COMPONENTIZE_NAMESPACE . '\\' . COMPONENTIZE_FIELD_HANDLER_DEFAULT,
    'number_integer' =>     COMPONENTIZE_NAMESPACE . '\ComponentFieldNumber',
    'number_decimal' =>     COMPONENTIZE_NAMESPACE . '\ComponentFieldNumber',
    'number_unformatted' => COMPONENTIZE_NAMESPACE . '\ComponentFieldNumber',
    'file' =>               COMPONENTIZE_NAMESPACE . '\ComponentFieldFile',
  );
}


/**
 * Implements hook_field_formatter_info_alter().
 *
 * @todo Limit field mapping admin UI to correct fieldgroup type. #18
 *
 * Add custom setting for field formatter types within fieldgroups.
 */
function componentize_fieldgroup_field_formatter_info_alter(&$info) {
  $types = array_keys(componentize_fieldgroup_field_types());
  foreach ($info as $format => $formatter) {
    // Field type is registered.
    if (array_intersect($formatter['field types'], $types)) {
      $info[$format]['settings'] += array(
        'componentize_fieldgroup_variable_name' => '',
        'componentize_fieldgroup_via_template' => '',
      );
    }
  }
}


/**
 * Implements hook_field_formatter_settings_form_alter().
 *
 * Add settings to fields within component fieldgroups.
 *
 * @param array $settings_form
 * @param array $context
 */
function componentize_fieldgroup_field_formatter_settings_form_alter(&$settings_form, $context) {
  $display = $context['instance']['display'][$context['view_mode']];
  $settings = $display['settings'];
  $group_settings = componentize_get_group_settings($context);

  // Us configured compontent.
  if (isset($group_settings['component'])) {
    $factory = new ComponentFactory;
    $component = $factory->create($group_settings['component']);
    // Choose from registered variables.
    $settings_form['componentize_fieldgroup_variable_name'] = array(
      '#title' => t('Variable'),
      '#type' => 'select',
      '#options' => drupal_map_assoc($component->getVariables()),
      '#default_value' => $settings['componentize_fieldgroup_variable_name'],
      '#required' => TRUE,
    );
    $settings_form['componentize_fieldgroup_via_template'] = array(
      '#title' => t('Data to template'),
      '#type' => 'checkbox',
      '#description' => t('Skip rendering and send data to template via handler plugin.'),
      '#default_value' => $settings['componentize_fieldgroup_via_template'],
    );
  }

}


/**
 * Obtain group settings from field via form data.  Handles multiple-contexts.
 *
 * @todo Find if this field is in the group from the _summary_alter() context.
 *
 * @param array $context
 * @return array
 */
function componentize_get_group_settings($context) {
  $field_name = $context['instance']['field_name'];

  if (isset($context['form_state'])) {
    // @todo More carefully confirm there is a fieldgroup set.
    $parent_group = $context['form_state']['input']['fields'][$field_name]['parent'];
    return $context['form_state']['field_group'][$parent_group]->format_settings['instance_settings'];
  }
  else {
    // @todo Limit field mapping admin UI to correct fieldgroup type. #18
    // $instance = field_info_instance(
    //   $context['instance']['entity_type'], $field_name, $context['instance']['bundle']
    // );
    return FALSE;
  }
}


/**
 * Validation for text-input variable settings.
 */
// function componentize_fieldgroup_validate_variable($element, &$form_state, $form) {
//   if (!ctype_alnum($element['#value'])) {
//     form_error($element, t('This field must be alphanumeric.'));
//   }
// }


/**
 * Reduce modifier choice to single string for multiple select lists in the fieldgroup.
 */
function componentize_fieldgroup_single_modifier_validate($element, &$form_state, $form) {
  // Due to using states for easy admin UI, an array is returned.
  $group_name = $form_state['triggering_element']['#field_name'];
  $group_values = &$form_state['values']['fields'][$group_name]['format_settings']['settings']['instance_settings'];

  // Update value.
  $group_values['modifier'] = $group_values['modifier'][$group_values['component']];
}


/**
 * Implements hook_field_formatter_settings_summary_alter().
 *
 * @todo Limit field mapping admin UI to fieldgroups, and of correct type. #18
 *
 * Display field mapping settings to admins.
 */
function componentize_fieldgroup_field_formatter_settings_summary_alter(&$summary, $context) {
  $display = $context['instance']['display'][$context['view_mode']];
  $settings = $display['settings'];

  //$group_settings = componentize_get_group_settings($context);
  //if (isset($group_settings['component'])) {

  if (isset($settings['componentize_fieldgroup_variable_name'])) {
    if (!empty($summary)) {
      $summary .= '<br />';
    }

    if ($settings['componentize_fieldgroup_variable_name']) {
      $summary .= t('Map to "@variable" template variable', array(
        '@variable' => $settings['componentize_fieldgroup_variable_name'],
      ));
    }
    else {
      $summary .= t('No template variable mapped yet!');
    }

    if ($settings['componentize_fieldgroup_via_template']) {
      t('Using field handler for template values');
    }
    else {
      t('Rendered prior to template');
    }
  }
}


/**
 * Returns HTML for a component fieldgroups.
 *
 * @param array $variables
 *
 * @return string
 */
function theme_componentize_fieldgroup($variables) {
  // Find variables for templates in fields.
  $template_vars = array();
  $entity_object = FALSE;
  foreach ($variables['element']['#children'] as $field_name) {
    $field_elm = $variables['element'][$field_name];

    // Load it once from a field.
    $entity_object = $entity_object ?: $field_elm['#object'];

    // Get data from field settings within group.
    $instance = field_info_instance(
      $field_elm['#entity_type'], $field_name, $field_elm['#bundle']
    );
    $variable_map = $instance['display'][$variables['element']['#view_mode']]['settings']['componentize_fieldgroup_variable_name'];
    $via_template = TRUE; //$field_elm['#settings']['componentize_fieldgroup_via_template'];

    // Field type handling done by pluggable class.
    $field_info = field_info_field($field_name);
    $type = $field_elm['#field_type'];
    $handler = FALSE;
    if ($via_template) {
      $component_types = componentize_fieldgroup_field_types();
      $class_name = isset($component_types[$type]) ? $component_types[$type] : COMPONENTIZE_DEFAULT_FIELD_HANDLER;
      // Load class.
      if (class_exists($class_name)) {
        $handler = new $class_name($field_elm);
      }
      else {
        watchdog('componentize', 'Missing class: !class', array('!class' => $class_name), WATCHDOG_ERROR);
        drupal_set_message(t('Missing class: !class', array('!class' => $class_name)), 'error');
      }
    }

    // Render field.
    $template_vars[$variable_map] = componentize_render_field(
      $field_name, $field_info, $variables['element'], $entity_object, $handler
    );

    // Add field label to variables for all types.
    $template_vars[$variable_map . '_label'] = $instance['label'];
  }

  // Pass data through template.
  $factory = new ComponentFactory;
  $component = $factory->create($variables['element']['#settings']['component']);

  // Make modifier available in the template.
  if (isset($element['#settings']['modifier'])) {
    $component->setModifier($variables['element']['#settings']['modifier']);
  }

  return $component->render($template_vars);
}


/**
 * Rendering field via Drupal or component template, handle multiple.
 *
 * @todo Nested components.
 *
 * @param string $field_name
 * @param array $field_info
 * @param array $element
 * @param object $entity_object
 * @param ComponentField $handler
 *
 * @return string|array
 */
function componentize_render_field($field_name, $field_info, $element, $entity_object, $handler) {
  $entity_type = $element[$field_name]['#entity_type'];
  $items = $element[$field_name]['#items'];

  // Allow multi-field.
  if (($field_info['cardinality'] > 1) || ($field_info['cardinality'] < 0)) {
    $output = array();
    foreach ($items as $item) {
      // Via field handler class or Drupal render.
      $output[] = ($handler) ? $handler->getValues($item) : field_view_value(
        $entity_type, $entity_object, $field_name, $item
      );
    }
  }
  else {
    // Single value field, same way.
    $output = ($handler) ? $handler->getValues($items[0]) : field_view_value(
      $entity_type, $entity_object, $field_name, $items[0]
    );
  }

  return $output;
}
