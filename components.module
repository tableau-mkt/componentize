<?php
/**
 * @file Style-guide component integration.
 */

use Component\Component;
use Scan\Kss\Parser;

//use Components\Component;
require('lib/component.php');

define('COMPONENTS_DIRECTORY', 'sites/all/kss');

/**
 * Implements hook_menu().
 */
function components_menu() {
  $items['admin/structure/components'] = array(
    'title' => 'Components',
    'description' => 'Configure component structure.',
    'access arguments' => array('administer components'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('components_settings'),
    'file' => 'components.admin.inc'
  );
  return $items;
}


/**
 * Implements hook_perm().
 */
function components_permission() {
  return array(
    'administer components' => array(
      'title' => t('Administer Components'),
      'description' => t('Configure component entities.')
    )
  );
}


/**
 * Implements hook_ctools_plugin_api().
 */
function components_ctools_plugin_api($module, $api) {
  if ($module == 'field_group' && $api == 'field_group') {
    return array('version' => 1);
  }
}


/**
 * Implements hook_block_info().
 *
 * @return array
 */
// function components_block_info() {
//   $block_config = variable_get('components_blocks', array());
//   $block_list = array_intersect_key($block_config, _component_list());

//   foreach ($block_list as $component) {
//     $attached = array();
//     if ($component->js) {
//       $attached[] = variable_get('components_directory', COMPONENTS_DIRECTORY) .
//           '/' . $component->name . '.js';
//     }

//     $blocks['components-' . $component->namespace] = array(
//       'info' => $component->name,
//       '#markup' => _components_block_content($component->name),
//       'cache' => DRUPAL_NO_CACHE,
//       '#attached' => array('js' => $attached),
//     );
//   }

//   return $blocks;
// }


/**
 * Generate content of component blocks.
 */
// function _components_block_content($name) {
//   return $name;
// }


/**
 * Implements hook_theme().
 */
function components_theme() {
  return array(
    'component_fieldgroup' => array(
      'render element' => 'element',
    ),
  );
}


/**
 * Returns HTML for a field_group_table_wrapper.
 */
function theme_component_fieldgroup($variables) {
  $component = new Component($variables['element']['#settings']['component']);
  $component->render(array(
    'title' => 'RoadShow',
    'score' => '56',
  ));

  // @todo Lookup field list.
  $fields = array(
    'title' => 'RoadShow',
    'date' => '5-10-15',
  );
  //dsm($variables);
  // foreach ($fields as $field) {
  //   // @todo Deal with mulitple values.
  //   $data[$field] = $variables['element'][$field]['#items'][0];
  // }

  $output = $component->render($fields);

  // $element = $variables['element'];
  // $mode = $element['#mode'];
  // $settings = $element['#settings'];

  // // Allow modules to alter the rows, useful for removing empty rows.
  // $children = element_children($element, TRUE);
  // drupal_alter('components_fieldgroup', $element, $children);

  // // Build the table rows.
  // $rows = array();
  // foreach ($children as $child) {
  //   $variables = array(
  //     'element' => $element[$child],
  //     'settings' => $settings,
  //     'mode' => $mode,
  //   );
  //   unset($element[$child]);

  //   $rows[] = _field_group_table_row_build($variables);
  // }

  // $element['#field_group_table']['#rows'] = $rows;

  // $render = array(
  //   '#theme' => 'container',
  //   '#attributes' => array(
  //     'id' => isset($element['#id']) ? $element['#id'] : '',
  //   ) + $element['#attributes'],
  // );

  // $render['#children'] = drupal_render($element['#caption']) . "\n";
  // $render['#children'] .= drupal_render($element['#field_group_table']) . "\n";

  // return drupal_render($render);
}


/**
 * Provide list of components, via parsing directory or stashed variable.
 *
 * @todo Nested components (accordian + accordian item).
 *
 * @param boolean $shallow
 *   Just return a list without full objects (optional).
 *
 * @return array
 */
function components_list($shallow = FALSE, $reset = FALSE) {
  $list = &drupal_static(__FUNCTION__ . $shallow);
  $dir = variable_get('components_directory', COMPONENTS_DIRECTORY);

  // Use the stored variable.
  if ($list) return $list;

  // Get the list, try via variable.
  $list = variable_get('components_list', array());
  if (empty($list)) {

    // Parse all styles.
    $styleguide = new Parser();
    $styleguide->Parser($dir);
    // Generate component list, via sections overview.
    $sections = _components_find_sections();
    foreach ($sections as $section) {
      $components = $styleguide->getSectionChildren($section);
      $list = array_merge($list, $components);
    }
    // Store results or complain.
    if (!empty($list)) {
      variable_set('components_list', $list);
    }
    else {
      drupal_set_message('components', 'No web components found.', array(), 'warning');
    }

  }

  // Allow adding custom components.
  drupal_alter('components_list', $list, $shallow);

  // Keep it simple.
  if ($shallow) return $list;

  // Build component objects.
  if (!$styleguide) {
    $styleguide = new Parser($dir);
  }
  foreach ($list as $key => $component) {
    $list[$key] = new Component($component, $configs, $styleguide);
  }

  return $list;
}


/**
 * Obtain KSS component sections within folder via "Style guide: boxes.badge" names.
 *
 * @return array
 */
function _components_find_sections() {
  $filepath = variable_get('components_directory', COMPONENTS_DIRECTORY) . '_kss_sections.scss';
  $label = 'Style guide:';
  $sections = array();

  if ($data = _components_open_file($filepath)) {
    // Pull names out of the file.
    foreach (explode($data, '/*') as $section) {
      $lines = explode($section, "\n");
      // Add section from last comment line.
      if (strpos($label) === 0) {
        $sections[] = str_replace($label, '', $sections[$lines[0]]);
      }
    }

  }

  return $sections;
}


/**
 * File opener utility.
 *
 * @param string $filename
 * @return string|boolean
 */
function _components_open_file($filename) {
  $filepath = variable_get('components_directory', COMPONENTS_DIRECTORY) . '/'. $filename;
  try {
    return file_get_contents($filepath);
  }
  catch(Exception $e) {
    drupal_set_message('components', 'Web component file missing: @file',
        array('@file' => $filepath), WATCHDOG_ERROR);
    return FALSE;
  }
}


/**
 * Helper function to parse the components directory
 */

function components_get_components() {

  $dummy_components = array(
    'button' => array(
      'expected_fields' => array('title','description'),
      'modifiers' => array('cta','red','blue','yellow','small','large'),
    ),
    'box' => array(
      'expected_fields' => array('content'),
      'modifiers' => array('solid','outline','rounded','double-padding'),
    ),
    'badge' => array(
      'expected_fields' => array('title','number','tagline'),
      'modifiers' => array('red','blue','yellow','round'),
    ),
  );

  $components = array();

  foreach ($dummy_components as $key => $value) {
    $myComponent = new Component('badge');
    foreach ($value['expected_fields'] as $field) {
      $myComponent->addField($field);
    }
    foreach ($value['modifiers'] as $modifier) {
     $myComponent->addModifier($modifier);
    }
    $components[] = $myComponent;
  }

  return $components;
}
