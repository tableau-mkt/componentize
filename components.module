<?php
/**
 * @file Style-guide component integration.
 */

use Component\ComponentFactory;
use Component\ParserKSSnode;

//use Components\Component;
require('lib/component.php');

define('COMPONENTS_DIRECTORY', 'sites/all/components');
define('COMPONENTS_COMPILED_ASSETS', 'sites/all/components/dist');
define('COMPONENTS_COMPILED_TEMPLATES', 'sites/default/files/components');
define('COMPONENTS_COMPILED_CSS', 'style.css');
define('COMPONENTS_COMPILED_JS', 'script.js');

/**
 * Implements hook_menu().
 */
function components_menu() {
  $items['admin/structure/components'] = array(
    'title' => 'Components',
    'description' => 'Browse available component structure.',
    'access arguments' => array('access components library'),
    'page callback' => '_components_library_output',
    'file' => 'components.library.inc'
  );
  $items[$path . '/library'] = array(
    'title' => 'Library',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/structure/components/settings'] = array(
    'title' => 'Settings',
    'description' => 'Configure component structure.',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('components_settings'),
    'file' => 'components.admin.inc'
  );

  return $items;
}


/**
 * Implements hook_perm().
 */
function components_permission() {
  return array(
    'access components library' => array(
      'title' => t('Visit Components Library'),
      'description' => t('Browse available component structure.')
    ),
  );
}


/**
 * Implments hook_preprocess_page().
 */
function components_preprocess_page(&$variables) {
  $assets_dir = variable_get('components_assets', COMPONENTS_COMPILED_ASSETS);

  // Javascript.
  if (file_exists($assets_dir . '/' . COMPONENTS_COMPILED_JS)) {
    drupal_add_js($assets_dir . '/' . COMPONENTS_COMPILED_JS);
  }
  else {
    drupal_set_message(t('Unable to find and include compiled Components javascript.'), 'warning');
  }

  // CSS.
  if (file_exists($assets_dir . '/' . COMPONENTS_COMPILED_CSS)) {
    drupal_add_css($assets_dir . '/' . COMPONENTS_COMPILED_CSS);
  }
  else {
    drupal_set_message(t('Unable to find and include compiled Components styles.'), 'warning');
  }
}


/**
 * Implements hook_block_info().
 *
 * @return array
 */
// function components_block_info() {
//   $block_config = variable_get('components_blocks', array());
//   $block_list = array_intersect_key($block_config, _component_list());

//   foreach ($block_list as $component) {
//     $attached = array();
//     if ($component->js) {
//       $attached[] = variable_get('components_directory', COMPONENTS_DIRECTORY) .
//           '/' . $component->getName() . '.js';
//     }

//     $blocks['components-' . $component->getNamespace() = array(
//       'info' => $component->getName(),
//       '#markup' => _components_block_content($component->getName()),
//       'cache' => DRUPAL_NO_CACHE,
//       '#attached' => array('js' => $attached),
//     );
//   }

//   return $blocks;
// }


/**
 * Generate content of component blocks.
 */
// function _components_block_content($name) {
//   return $name;
// }


/**
 * Provide list of components, via parsing directory or stashed variable.
 *
 * @todo Nested components (accordian + accordian item).
 *
 * @param boolean $shallow
 *   Just return a list without full objects (optional).
 *
 * @return array
 */
function components_list($shallow = FALSE, $reset = FALSE) {
  $list = &drupal_static(__FUNCTION__ . (($shallow) ? 'SHALLOW' : 'FULL'));
  $styleguide = &drupal_static(__FUNCTION__);
  $dir = variable_get('components_directory', COMPONENTS_DIRECTORY);

  // Use the stored variable.
  if (isset($list) && !$reset) return $list;

  // Get the list, try via variable.
  $list = variable_get('components_list', array());
  if (empty($list) && $reset) {
    // Parse all styles.
    $styleguide = new ParserKSSnode($dir);
    $sections =  $styleguide->getSections();
    foreach ($sections as $section) {
      $components = $styleguide->getSectionChildren($section->getTitle());
      $list = array_merge($list, array_keys($components));
    }
    // Store results or complain.
    if (!empty($list)) {
      variable_set('components_list', $list);
    }
    else {
      drupal_set_message('components', 'No web components found.', array(), 'warning');
    }
  }

  // Keep simple when possible.
  if (!$shallow) {
    // Build component objects.
    $list_full = array();
    $factory = new ComponentFactory;
    foreach ($list as $key => $component) {
      $list_full[$component] = $factory->create($component, array());
      // Clear storage and compiled templates.
      if ($reset) {
        $list_full[$component]->remove();
      }
    }
    // Allows static.
    $list = $list_full;
  }

  // Allow adding custom components.
  drupal_alter('components_list', $list, $shallow);

  return $list;
}
