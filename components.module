<?php
/**
 * @file Style-guide component integration.
 */

use Component\Component;
use Scan\Kss\Parser;

//use Components\Component;
require('lib/component.php');

define('COMPONENTS_DIRECTORY', 'sites/all/components');

/**
 * Implements hook_menu().
 */
function components_menu() {
  $items['admin/structure/components'] = array(
    'title' => 'Components',
    'description' => 'Configure component structure.',
    'access arguments' => array('administer components'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('components_settings'),
    'file' => 'components.admin.inc'
  );
  return $items;
}


/**
 * Implements hook_perm().
 */
function components_permission() {
  return array(
    'administer components' => array(
      'title' => t('Administer Components'),
      'description' => t('Configure component entities.')
    )
  );
}


/**
 * Implements hook_ctools_plugin_api().
 */
function components_ctools_plugin_api($module, $api) {
  if ($module == 'field_group' && $api == 'field_group') {
    return array('version' => 1);
  }
}


/**
 * Implements hook_theme().
 */
function components_theme() {
  return array(
    'component_fieldgroup' => array(
      'render element' => 'element',
    ),
  );
}


/**
 * Implements hook_block_info().
 *
 * @return array
 */
// function components_block_info() {
//   $block_config = variable_get('components_blocks', array());
//   $block_list = array_intersect_key($block_config, _component_list());

//   foreach ($block_list as $component) {
//     $attached = array();
//     if ($component->js) {
//       $attached[] = variable_get('components_directory', COMPONENTS_DIRECTORY) .
//           '/' . $component->name . '.js';
//     }

//     $blocks['components-' . $component->namespace] = array(
//       'info' => $component->name,
//       '#markup' => _components_block_content($component->name),
//       'cache' => DRUPAL_NO_CACHE,
//       '#attached' => array('js' => $attached),
//     );
//   }

//   return $blocks;
// }


/**
 * Generate content of component blocks.
 */
// function _components_block_content($name) {
//   return $name;
// }


/**
 * Returns HTML for a field_group_table_wrapper.
 */
function theme_component_fieldgroup($variables) {
  // Only generate styleguide once.
  $styleguide = &drupal_static(__FUNCTION__);
  if (!isset($styleguide)) {
    $dir = variable_get('components_directory', COMPONENTS_DIRECTORY);
    $styleguide = new Parser($dir);
  }

  // Find variables in fields.
  $templateVars = array();
  $elm = $variables['element'];
  foreach ($elm['#children'] as $field) {
    // Multi-value.
    if (count($elm[$field]['#items']) > 1) {
      $templateVars[$field] = array();
      foreach ($elm[$field]['#items'] as $value) {
        $templateVars[$field][] = $value['safe_value'];
      }
    }
    else {
      $templateVars[$field] = $elm[$field]['#items'][0]['safe_value'];
    }
  }

  // Pass data through template.
  $componentName = 'buttons.cta'; //$variables['element']['#settings']['component']
  $component = new Component($componentName, array(), $styleguide);

  return $component->render($templateVars);
}


/**
 * Provide list of components, via parsing directory or stashed variable.
 *
 * @todo Nested components (accordian + accordian item).
 *
 * @param boolean $shallow
 *   Just return a list without full objects (optional).
 *
 * @return array
 */
function _components_list($shallow = FALSE, $reset = FALSE) {
  $list = &drupal_static(__FUNCTION__ . $shallow);
  $dir = variable_get('components_directory', COMPONENTS_DIRECTORY);

  // Use the stored variable.
  if (isset($list)) return $list;

  // Get the list, try via variable.
  $list = variable_get('components_list', array());
  if (empty($list)) {
    // Parse all styles.
    $styleguide = new Parser($dir);
    $sections =  $styleguide->getSections();
    foreach ($sections as $section) {
      $components = $styleguide->getSectionChildren($section->getTitle());
      $list[] = array_keys($components);
    }
    // Store results or complain.
    if (!empty($list)) {
      variable_set('components_list', $list);
    }
    else {
      drupal_set_message('components', 'No web components found.', array(), 'warning');
    }
  }

  // Allow adding custom components.
  drupal_alter('components_list', $list, $shallow);

  // Keep it simple.
  if ($shallow) return $list;

  // Build component objects.
  if (!$styleguide) {
    // If just the list existed already create a common styleguide object.
    $styleguide = new Parser($dir);
  }
  foreach ($list as $key => $component) {
    $list[$key] = new Component($component, array(), $styleguide);
  }

  return $list;
}


/**
 * Helper function to parse the components directory
 */

function components_get_components() {

  $dummy_components = array(
    'button' => array(
      'expected_fields' => array('title','description'),
      'modifiers' => array('cta','red','blue','yellow','small','large'),
    ),
    'box' => array(
      'expected_fields' => array('content'),
      'modifiers' => array('solid','outline','rounded','double-padding'),
    ),
    'badge' => array(
      'expected_fields' => array('title','number','tagline'),
      'modifiers' => array('red','blue','yellow','round'),
    ),
  );

  $components = array();

  foreach ($dummy_components as $key => $value) {
    $myComponent = new Component('badge');
    foreach ($value['expected_fields'] as $field) {
      $myComponent->addField($field);
    }
    foreach ($value['modifiers'] as $modifier) {
     $myComponent->addModifier($modifier);
    }
    $components[] = $myComponent;
  }

  return $components;
}
