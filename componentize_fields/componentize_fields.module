<?php
/**
 * @file Render field content through a component.
 */

use Componentize\ComponentFactory;
use Componentize\ComponentsField;


/**
 * Implementation of hook_ctools_plugin_api().
 *
 * Tell CTools that we support the default_mymodule_presets API.
 */
function componentize_fields_ctools_plugin_api($owner, $api) {
  if ($owner == 'componentize_fields' && $api == 'entity_view_mode_component') {
    return array('version' => 1);
  }
}


/**
 * Export callback for exportable settings schema via ctools.
 */
function componentize_fields_export_evm_component($context) {
  return ctools_export_object('entity_view_mode_component', $context);
}


/**
 * List available field types for variables.
 *
 * @return array
 */
function componentize_fields_types() {
  $handlers = &drupal_static(__FUNCTION__);

  if (!$handlers) {
    $handlers = module_invoke_all('componentize_field_types_info');
    drupal_alter('componentize_field_types_info', $handlers);
  }

  return $handlers;
}


/**
 * Implements hook_componentize_field_types_info().
 *
 * Register available field types.
 */
function componentize_fields_componentize_field_types_info() {
  return array(
    'text' =>               'Componentize\\ComponentField',
    'text_long' =>          'Componentize\\ComponentField',
    'text_with_summary' =>  'Componentize\\ComponentField',
    'number_integer' =>     'Componentize\\ComponentFieldNumber',
    'number_decimal' =>     'Componentize\\ComponentFieldNumber',
    'number_unformatted' => 'Componentize\\ComponentFieldNumber',
    'file' =>               'Componentize\\ComponentFieldFile',
  );
}


/**
 * Implements hook_theme().
 */
function componentize_fields_theme() {
  return array(
    'component_view_mode' => array(
      'render element' => 'element',
    ),
  );
}


/**
 * Implements hook_permission().
 */
function componentize_fields_permission() {
  $permissions = array();

  foreach (entity_get_info() as $type) {

dsm($type);

    // foreach ($type['bundles'] as $bundle) {
    //   // Per bundle permission available.
    //   $permissions['configure ' . $type . '-' . $bundle . 'component'] = array(
    //     'title' => t('Configure ' . $type . ': ' . $bundle . ' component'),
    //   );
    // }
  }

  return $permissions;
}


/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add component fields to the entity view modes display form.
 */
function componentize_fields_form_field_ui_display_overview_form_alter(&$form, &$form_state) {
  // Current value via ctools exportable schema.
  $form['#export_id'] = $form['#entity_type'] . '|' . $form['#bundle'] . '|' . $form['#view_mode'];
  $settings = _componentize_fields_display_settings($form['#export_id']);
  $component = ($settings) ? $settings->component : '';
  $modifier = ($settings) ? $settings->settings['modifier'] : '';

  // Create vertical tabs.
  _componentize_fields_ui_create_vertical_tabs($form);

  // Add component form element.
  $form['additional_settings']['componentize']['component'] = array(
    '#title' => t('Component'),
    '#type' => 'select',
    '#options' => drupal_map_assoc(array_merge(array('' => t('- None -')), componentize_list(TRUE))),
    '#default_value' => $component,
    '#weight' => 1,
    '#description' => l(t('Manage available components'), 'admin/structure/types/manage/' . $form['#bundle']),
  );

  // Add modifier select form element.
  _componentize_build_modifier_list_form($form, $modifier);

  // Save settings on submit.
  $form['additional_settings']['componentize']['#new'] = ($settings) ? FALSE : TRUE;
  $form['#submit'] = array('componentize_fields_entity_view_mode_save');
}


/**
 * Save the layout settings from the 'Manage display' screen.
 *
 * @todo Would be nice to maintain structure but #tree isn't working.
 */
function componentize_fields_entity_view_mode_save($form, &$form_state) {
  $settings = $form_state['values']['additional_settings'];

  // Save layout and add regions if necessary.
  $record = new stdClass;
  $record->id = $form['#export_id'];
  $record->entity_type = $form['#entity_type'];
  $record->bundle = $form['#bundle'];
  $record->view_mode = $form['#view_mode'];
  $record->component = $settings['component'];
  $record->settings = array(
    'modifier' => $settings['component_modifier']
  );

  // Let other modules alter the settings.
  drupal_alter('entity_view_mode_component_save', $record, $form_state);

  // Store the record.
  // NOTE: Return value is mostly useless, fails silently.
  if ($form['additional_settings']['componentize']['#new']) {
    // Include primary for new records.
    drupal_write_record('componentize_fields_entity_view_mode', $record);
  }
  else {
    drupal_write_record('componentize_fields_entity_view_mode', $record, array(
      'entity_type', 'bundle', 'view_mode'
    ));
  }

  // Clear entity info cache.
  cache_clear_all('entity_info', 'cache', TRUE);
}


/**
 * Get the current settings.
 *
 * @param string $export_id
 *   Composite string of entity_type|bundle|view_mode.
 *
 * @return array
 */
function _componentize_fields_display_settings($export_id) {
  $return = &drupal_static(__FUNCTION__ . $export_id);
  if ($return) return $return;
  else {
    $return = array();
  }

  // Get all values from custom schema table.
  $settings = ctools_export_crud_load_all('componentize_fields_entity_view_mode');

  // Could be handle to allow getting several settings at once, not currently necessary.
  // Quick return if exact.
  // if ($view_mode) {
  //   return isset($settings[$entity_type . '-' . $bundle . '-' . $view_mode] ?: FALSE;
  // }
  // // Find relevant and become nested array.
  // $match = $entity_type;
  // $match += $bundle ? '-' . $bundle : '';
  // foreach ($settings as $key => $config) {
  //   if (!preg_match('/^' . $match . '/', $config)) {
  //     list($e, $b, $view_mode) = explode('-', $config);
  //     $return[$e][$b][] = $view_mode;
  //   }
  // }

  $return = isset($settings[$export_id]) ? $settings[$export_id] : FALSE;

  return $return;
}


/**
 * Create vertical tab space for admin settings.
 */
function _componentize_fields_ui_create_vertical_tabs(&$form) {
  // Add additional settings vertical tab.
  if (!isset($form['additional_settings'])) {
    $form['additional_settings'] = array(
      '#type' => 'vertical_tabs',
      '#theme_wrappers' => array('vertical_tabs'),
      '#prefix' => '<div>',
      '#suffix' => '</div>',
    );
    $form['#attached']['js'][] = 'misc/form.js';
    $form['#attached']['js'][] = 'misc/collapse.js';
  }
  // Add layouts form.
  $form['additional_settings']['componentize'] = array(
    '#type' => 'fieldset',
    '#title' => t('Components'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#parents' => array('additional_settings'),
    '#weight' => 10,
  );
}


/**
 * Implements hook_field_formatter_settings_form_alter().
 *
 * Add settings to fields within component view modes.
 *
 * @param array $settings_form
 * @param array $context
 */
function componentize_fields_field_formatter_settings_form_alter(&$settings_form, $context) {
  $display = $context['instance']['display'][$context['view_mode']];
  $settings = $display['settings'];

  // Obtain Paragraph settings.
  // See: componentize_get_group_settings($context);

  // Us configured compontent.
  if (isset($view_mode_settings['component'])) {
    $component = ComponentFactory::create($view_mode_settings['component']);
    // Choose from registered variables.
    $settings_form['componentize_fields_variable_name'] = array(
      '#title' => t('Variable'),
      '#type' => 'select',
      '#options' => drupal_map_assoc($component->getVariables()),
      '#default_value' => $settings['componentize_fields_variable_name'],
      '#required' => TRUE,
    );
    $settings_form['componentize_fields_via_template'] = array(
      '#title' => t('Data to template'),
      '#type' => 'checkbox',
      '#description' => t('Skip rendering and send data to template via handler plugin.'),
      '#default_value' => $settings['componentize_fields_via_template'],
    );
  }
}


/**
 * Validation for text-input variable settings.
 */
// function componentize_fieldgroup_validate_variable($element, &$form_state, $form) {
//   if (!ctype_alnum($element['#value'])) {
//     form_error($element, t('This field must be alphanumeric.'));
//   }
// }


/**
 * Implements hook_field_formatter_info_alter().
 *
 * @todo Limit field mapping admin UI to correct Paragraphs type. #18
 *
 * Add custom setting for field formatter types within Paragraphs.
 */
function componentize_fields_field_formatter_info_alter(&$info) {
  $types = array_keys(componentize_fields_types());

  foreach ($info as $format => $formatter) {
    // Field type is registered.
    if (array_intersect($formatter['field types'], $types)) {
      $info[$format]['settings'] += array(
        'componentize_fields_variable_name' => '',
        'componentize_fields_via_template' => '',
      );
    }
  }
}


/**
 * Implements hook_form_alter().
 */
function componentize_fields_form_alter(&$form, &$form_state, $form_id) {

// dsm($form);

// dsm(entity_get_info());

  // Allow some users to edit component settings per entity.
  // if (user_access('configure ' . $form['#entity_type'] . '-' . $form['#bundle'] . 'component')) {

    // Determine if entity form.
    //$types = array_keys(entity_get_info());

    //customer_story_node_form
    //taxonomy_form_term

    // $sub_string = $form_id;
    // while(!$found = in_array($sub_string, $types)) {
    //   $found = TRUE;
    //   break;
    // }

  // }
}


/**
 * Implements hook_entity_view().
 *
 * @param array $entity
 * @param string $type
 * @param string $view_mode
 * @param string $langcode
 */
function componentize_fields_entity_view($entity, $type, $view_mode, $langcode) {


  if ($entity->content['body']['#view_mode']);

  // Take over rendering if set to component mode.
  // if ($entity[$view_mode]['format'] === 'component') {
  //   $element += array(
  //     '#theme' => 'component_view_mode',
  //     '#settings' => '', // $entity[$view_mode]->format_settings['instance_settings'],
  //   );
  // }
}


/**
 * Returns HTML for a component fieldgroups.
 *
 * @param array $variables
 *
 * @return string
 */
function theme_component_view_mode($variables) {

}

/**
 * Rendering field via Drupal or component template, handle multiple.
 *
 * @todo Nested components.
 *
 * @param string $field_name
 * @param array $field_info
 * @param array $element
 * @param object $entity_object
 * @param ComponentField $handler
 *
 * @return string|array
 */
function componentize_fields_render_field($field_name, $field_info, $element, $entity_object, $handler) {
  $entity_type = $element[$field_name]['#entity_type'];
  $items = $element[$field_name]['#items'];

  // Allow multi-field.
  if (($field_info['cardinality'] > 1) || ($field_info['cardinality'] < 0)) {
    $output = array();
    foreach ($items as $item) {
      // Via field handler class or Drupal render.
      $output[] = ($handler) ? $handler->getValues($item) : field_view_value(
        $entity_type, $entity_object, $field_name, $item
      );
    }
  }
  else {
    // Single value field, same way.
    $output = ($handler) ? $handler->getValues($items[0]) : field_view_value(
      $entity_type, $entity_object, $field_name, $items[0]
    );
  }

  return $output;
}
