<?php
/**
 * @file Render field content through a component.
 */

use Componentize\ComponentFactory;
use Componentize\ComponentsField;


/**
 * List available field types for variables.
 *
 * @return array
 */
function componentize_fields_types() {
  $handlers = &drupal_static(__FUNCTION__);

  if (!$handlers) {
    $handlers = module_invoke_all('componentize_field_types_info');
    drupal_alter('componentize_field_types_info', $handlers);
  }

  return $handlers;
}


/**
 * Implements hook_componentize_field_types_info().
 *
 * Register available field types.
 */
function componentize_fields_componentize_field_types_info() {
  return array(
    'text' =>               'Componentize\\ComponentField',
    'text_long' =>          'Componentize\\ComponentField',
    'text_with_summary' =>  'Componentize\\ComponentField',
    'number_integer' =>     'Componentize\\ComponentFieldNumber',
    'number_decimal' =>     'Componentize\\ComponentFieldNumber',
    'number_unformatted' => 'Componentize\\ComponentFieldNumber',
    'file' =>               'Componentize\\ComponentFieldFile',
  );
}


/**
 * Implements hook_theme().
 */
function componentize_fields_theme() {
  return array(
    'component_view_mode' => array(
      'render element' => 'element',
    ),
  );
}


/**
 * Implements hook_entity_info_alter().
 *
 * @param array &$entity_info
 */
function componentize_fields_entity_info_alter(&$entity_info) {
  // Add new setting for component on each entity view mode.
  foreach ($entity_info as $format => $formatter) {
    $entity_info[$format]['settings'] += array(
      'component' => '',
    );
  }
}


/**
 * Implements hook_field_formatter_settings_form_alter().
 *
 * Add settings to fields within component fieldgroups.
 *
 * @param array $settings_form
 * @param array $context
 */
function componentize_fields_field_formatter_settings_form_alter(&$settings_form, $context) {
  $display = $context['instance']['display'][$context['view_mode']];
  $settings = $display['settings'];

  // Obtain Paragraph settings.
  // See: componentize_get_group_settings($context);

  // Us configured compontent.
  if (isset($view_mode_settings['component'])) {
    $component = ComponentFactory::create($view_mode_settings['component']);
    // Choose from registered variables.
    $settings_form['componentize_fields_variable_name'] = array(
      '#title' => t('Variable'),
      '#type' => 'select',
      '#options' => drupal_map_assoc($component->getVariables()),
      '#default_value' => $settings['componentize_fields_variable_name'],
      '#required' => TRUE,
    );
    $settings_form['componentize_fields_via_template'] = array(
      '#title' => t('Data to template'),
      '#type' => 'checkbox',
      '#description' => t('Skip rendering and send data to template via handler plugin.'),
      '#default_value' => $settings['componentize_fields_via_template'],
    );
  }
}


/**
 * Validation for text-input variable settings.
 */
// function componentize_fieldgroup_validate_variable($element, &$form_state, $form) {
//   if (!ctype_alnum($element['#value'])) {
//     form_error($element, t('This field must be alphanumeric.'));
//   }
// }


/**
 * Implements hook_field_formatter_info_alter().
 *
 * @todo Limit field mapping admin UI to correct Paragraphs type. #18
 *
 * Add custom setting for field formatter types within Paragraphs.
 */
function componentize_fields_field_formatter_info_alter(&$info) {
  $types = array_keys(componentize_fields_field_types());

  foreach ($info as $format => $formatter) {
    // Field type is registered.
    if (array_intersect($formatter['field types'], $types)) {
      $info[$format]['settings'] += array(
        'componentize_fields_variable_name' => '',
        'componentize_fields_via_template' => '',
      );
    }
  }
}


/**
 * Implements hook_entity_view().
 *
 * @param array $entity
 * @param string $type
 * @param string $view_mode
 * @param string $langcode
 */
function componentize_fields_entity_view($entity, $type, $view_mode, $langcode) {
  // Take over rendering if set to component mode.
  if ($entity[$view_mode]['format'] === 'component') {
    $element += array(
      '#theme' => 'component_view_mode',
      '#settings' => $entity[$view_mode]->format_settings['instance_settings'],
    );
  }
}


/**
 * Returns HTML for a component fieldgroups.
 *
 * @param array $variables
 *
 * @return string
 */
function theme_component_view_mode($variables) {

}

/**
 * Rendering field via Drupal or component template, handle multiple.
 *
 * @todo Nested components.
 *
 * @param string $field_name
 * @param array $field_info
 * @param array $element
 * @param object $entity_object
 * @param ComponentField $handler
 *
 * @return string|array
 */
function componentize_fields_render_field($field_name, $field_info, $element, $entity_object, $handler) {
  $entity_type = $element[$field_name]['#entity_type'];
  $items = $element[$field_name]['#items'];

  // Allow multi-field.
  if (($field_info['cardinality'] > 1) || ($field_info['cardinality'] < 0)) {
    $output = array();
    foreach ($items as $item) {
      // Via field handler class or Drupal render.
      $output[] = ($handler) ? $handler->getValues($item) : field_view_value(
        $entity_type, $entity_object, $field_name, $item
      );
    }
  }
  else {
    // Single value field, same way.
    $output = ($handler) ? $handler->getValues($items[0]) : field_view_value(
      $entity_type, $entity_object, $field_name, $items[0]
    );
  }

  return $output;
}
